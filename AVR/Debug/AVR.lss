
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000036c  00800060  000007d2  00000866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008003cc  008003cc  00000bd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000248e  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d3c  00000000  00000000  000032de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000107d  00000000  00000000  0000401a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000574  00000000  00000000  00005098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a35  00000000  00000000  0000560c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ae0  00000000  00000000  00006041  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00007b21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__vector_10>
  2c:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3c       	cpi	r26, 0xCC	; 204
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	ac ec       	ldi	r26, 0xCC	; 204
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3d       	cpi	r26, 0xD2	; 210
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0c 02 	call	0x418	; 0x418 <main>
  8a:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <my_delay_ms>:
// }


void my_delay_ms(u16 ms)
{
	while (0 < ms)
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	41 f0       	breq	.+16     	; 0xa6 <my_delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	e9 ef       	ldi	r30, 0xF9	; 249
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <my_delay_ms+0x8>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <my_delay_ms+0xe>
  a0:	00 00       	nop
	{
		_delay_ms(1);
		--ms;
  a2:	01 97       	sbiw	r24, 0x01	; 1
// }


void my_delay_ms(u16 ms)
{
	while (0 < ms)
  a4:	c1 f7       	brne	.-16     	; 0x96 <my_delay_ms+0x4>
  a6:	08 95       	ret

000000a8 <BUZZER_PlayTrack>:
		--ms;
	}
}


void BUZZER_PlayTrack(){
  a8:	af 92       	push	r10
  aa:	bf 92       	push	r11
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	LCD_WriteString("START");
  bc:	80 eb       	ldi	r24, 0xB0	; 176
  be:	93 e0       	ldi	r25, 0x03	; 3
  c0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_WriteString>
  c4:	87 ea       	ldi	r24, 0xA7	; 167
  c6:	91 e6       	ldi	r25, 0x61	; 97
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <BUZZER_PlayTrack+0x20>
  cc:	00 c0       	rjmp	.+0      	; 0xce <BUZZER_PlayTrack+0x26>
  ce:	00 00       	nop
  d0:	c6 ef       	ldi	r28, 0xF6	; 246
  d2:	d1 e0       	ldi	r29, 0x01	; 1
  d4:	00 e6       	ldi	r16, 0x60	; 96
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	0f 2e       	mov	r0, r31
  da:	fc e8       	ldi	r31, 0x8C	; 140
  dc:	af 2e       	mov	r10, r31
  de:	f3 e0       	ldi	r31, 0x03	; 3
  e0:	bf 2e       	mov	r11, r31
  e2:	f0 2d       	mov	r31, r0
	for(u16 i=0;i<length;i++){
		LCD_voidWriteNumber(melody[i]);
		TMR1_voidSetFrequencyA_FASTPWM(melody[i]);
		setHalfDutyCycle();
		TMR1_voidStart();
		my_delay_ms(1000/durations[i] );
  e4:	0f 2e       	mov	r0, r31
  e6:	f8 ee       	ldi	r31, 0xE8	; 232
  e8:	cf 2e       	mov	r12, r31
  ea:	f3 e0       	ldi	r31, 0x03	; 3
  ec:	df 2e       	mov	r13, r31
  ee:	f0 2d       	mov	r31, r0
  f0:	7e 01       	movw	r14, r28
	LCD_WriteString("START");
	_delay_ms(100);
	u16 length = sizeof(melody) / sizeof(melody[0]);
	
	for(u16 i=0;i<length;i++){
		LCD_voidWriteNumber(melody[i]);
  f2:	69 91       	ld	r22, Y+
  f4:	79 91       	ld	r23, Y+
  f6:	07 2e       	mov	r0, r23
  f8:	00 0c       	add	r0, r0
  fa:	88 0b       	sbc	r24, r24
  fc:	99 0b       	sbc	r25, r25
  fe:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_voidWriteNumber>
		TMR1_voidSetFrequencyA_FASTPWM(melody[i]);
 102:	f7 01       	movw	r30, r14
 104:	80 81       	ld	r24, Z
 106:	91 81       	ldd	r25, Z+1	; 0x01
 108:	0e 94 88 03 	call	0x710	; 0x710 <TMR1_voidSetFrequencyA_FASTPWM>
		setHalfDutyCycle();
 10c:	0e 94 96 03 	call	0x72c	; 0x72c <setHalfDutyCycle>
		TMR1_voidStart();
 110:	0e 94 74 03 	call	0x6e8	; 0x6e8 <TMR1_voidStart>
		my_delay_ms(1000/durations[i] );
 114:	f8 01       	movw	r30, r16
 116:	61 91       	ld	r22, Z+
 118:	71 91       	ld	r23, Z+
 11a:	8f 01       	movw	r16, r30
 11c:	c6 01       	movw	r24, r12
 11e:	0e 94 b1 03 	call	0x762	; 0x762 <__divmodhi4>
 122:	cb 01       	movw	r24, r22
 124:	0e 94 49 00 	call	0x92	; 0x92 <my_delay_ms>
		LCD_voidClear();
 128:	0e 94 02 02 	call	0x404	; 0x404 <LCD_voidClear>
void BUZZER_PlayTrack(){
	LCD_WriteString("START");
	_delay_ms(100);
	u16 length = sizeof(melody) / sizeof(melody[0]);
	
	for(u16 i=0;i<length;i++){
 12c:	ca 15       	cp	r28, r10
 12e:	db 05       	cpc	r29, r11
 130:	f9 f6       	brne	.-66     	; 0xf0 <BUZZER_PlayTrack+0x48>
		TMR1_voidStart();
		my_delay_ms(1000/durations[i] );
		LCD_voidClear();
// 		TMR1_voidStop();
	}
	LCD_WriteString("ENDED");
 132:	86 eb       	ldi	r24, 0xB6	; 182
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_WriteString>
	TMR1_voidStop();
 13a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <TMR1_voidStop>
		
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	ff 90       	pop	r15
 148:	ef 90       	pop	r14
 14a:	df 90       	pop	r13
 14c:	cf 90       	pop	r12
 14e:	bf 90       	pop	r11
 150:	af 90       	pop	r10
 152:	08 95       	ret

00000154 <LCD_Write_CHAR>:
}


void LCD_Clear(void)
{
	LCD_Write_CMD(CMD_Clear_Display);
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 168:	8f e9       	ldi	r24, 0x9F	; 159
 16a:	9f e0       	ldi	r25, 0x0F	; 15
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Write_CHAR+0x18>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Write_CHAR+0x1e>
 172:	00 00       	nop
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 17c:	8b b3       	in	r24, 0x1b	; 27
 17e:	9c 2f       	mov	r25, r28
 180:	90 7f       	andi	r25, 0xF0	; 240
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	89 2b       	or	r24, r25
 186:	8b bb       	out	0x1b, r24	; 27
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 190:	8f e9       	ldi	r24, 0x9F	; 159
 192:	9f e0       	ldi	r25, 0x0F	; 15
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_Write_CHAR+0x40>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_Write_CHAR+0x46>
 19a:	00 00       	nop
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	30 e1       	ldi	r19, 0x10	; 16
 1a8:	c3 9f       	mul	r28, r19
 1aa:	c0 01       	movw	r24, r0
 1ac:	11 24       	eor	r1, r1
 1ae:	92 2f       	mov	r25, r18
 1b0:	9f 70       	andi	r25, 0x0F	; 15
 1b2:	89 2b       	or	r24, r25
 1b4:	8b bb       	out	0x1b, r24	; 27
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 1be:	8f e9       	ldi	r24, 0x9F	; 159
 1c0:	9f e0       	ldi	r25, 0x0F	; 15
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_Write_CHAR+0x6e>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_Write_CHAR+0x74>
 1c8:	00 00       	nop
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <LCD_WriteString>:
}

void LCD_WriteString(const u8 * str){
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
	
	while( (*str) !='\0'){
 1d4:	88 81       	ld	r24, Y
 1d6:	88 23       	and	r24, r24
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <LCD_WriteString+0x18>
 1da:	21 96       	adiw	r28, 0x01	; 1
		
		
		LCD_Write_CHAR(*str);
 1dc:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_Write_CHAR>
	LCD_Write_CMD(CMD_Clear_Display);
}

void LCD_WriteString(const u8 * str){
	
	while( (*str) !='\0'){
 1e0:	89 91       	ld	r24, Y+
 1e2:	81 11       	cpse	r24, r1
 1e4:	fb cf       	rjmp	.-10     	; 0x1dc <LCD_WriteString+0xe>
		str++;
		
	}
	
	
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <Private_LCDHalfPort>:
void LCD_voidWriteString(u8* copy_pu8String){
	while(*copy_pu8String!='\0'){
		LCD_SendData(*copy_pu8String);  //last2
		(copy_pu8String++);
	}
}	
 1ec:	cf 93       	push	r28
 1ee:	c8 2f       	mov	r28, r24
 1f0:	68 2f       	mov	r22, r24
 1f2:	61 70       	andi	r22, 0x01	; 1
 1f4:	88 e0       	ldi	r24, 0x08	; 8
 1f6:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 1fa:	c1 fb       	bst	r28, 1
 1fc:	66 27       	eor	r22, r22
 1fe:	60 f9       	bld	r22, 0
 200:	89 e0       	ldi	r24, 0x09	; 9
 202:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 206:	c2 fb       	bst	r28, 2
 208:	66 27       	eor	r22, r22
 20a:	60 f9       	bld	r22, 0
 20c:	8a e0       	ldi	r24, 0x0A	; 10
 20e:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 212:	c3 fb       	bst	r28, 3
 214:	66 27       	eor	r22, r22
 216:	60 f9       	bld	r22, 0
 218:	8c e0       	ldi	r24, 0x0C	; 12
 21a:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <LCD_SendData>:
 222:	cf 93       	push	r28
 224:	c8 2f       	mov	r28, r24
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 22e:	8c 2f       	mov	r24, r28
 230:	82 95       	swap	r24
 232:	8f 70       	andi	r24, 0x0F	; 15
 234:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Private_LCDHalfPort>
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 240:	81 ee       	ldi	r24, 0xE1	; 225
 242:	94 e0       	ldi	r25, 0x04	; 4
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <LCD_SendData+0x22>
 248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_SendData+0x28>
 24a:	00 00       	nop
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 254:	81 ee       	ldi	r24, 0xE1	; 225
 256:	94 e0       	ldi	r25, 0x04	; 4
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_SendData+0x36>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_SendData+0x3c>
 25e:	00 00       	nop
 260:	8c 2f       	mov	r24, r28
 262:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Private_LCDHalfPort>
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 26e:	81 ee       	ldi	r24, 0xE1	; 225
 270:	94 e0       	ldi	r25, 0x04	; 4
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_SendData+0x50>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_SendData+0x56>
 278:	00 00       	nop
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 282:	81 ee       	ldi	r24, 0xE1	; 225
 284:	94 e0       	ldi	r25, 0x04	; 4
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <LCD_SendData+0x64>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_SendData+0x6a>
 28c:	00 00       	nop
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <LCD_SendCommend>:
 292:	cf 93       	push	r28
 294:	c8 2f       	mov	r28, r24
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 29e:	8c 2f       	mov	r24, r28
 2a0:	82 95       	swap	r24
 2a2:	8f 70       	andi	r24, 0x0F	; 15
 2a4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Private_LCDHalfPort>
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 2b0:	00 00       	nop
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 2ba:	8c 2f       	mov	r24, r28
 2bc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Private_LCDHalfPort>
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 2c8:	00 00       	nop
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <LCD_init>:
 2d6:	8b e4       	ldi	r24, 0x4B	; 75
 2d8:	9d e1       	ldi	r25, 0x1D	; 29
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_init+0x4>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_init+0xa>
 2e0:	00 00       	nop
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Private_LCDHalfPort>
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 2f0:	8b e4       	ldi	r24, 0x4B	; 75
 2f2:	9d e1       	ldi	r25, 0x1D	; 29
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCD_init+0x1e>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <LCD_init+0x24>
 2fa:	00 00       	nop
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_WritePinVal>
 304:	88 e2       	ldi	r24, 0x28	; 40
 306:	0e 94 49 01 	call	0x292	; 0x292 <LCD_SendCommend>
 30a:	9a e0       	ldi	r25, 0x0A	; 10
 30c:	9a 95       	dec	r25
 30e:	f1 f7       	brne	.-4      	; 0x30c <LCD_init+0x36>
 310:	8f e0       	ldi	r24, 0x0F	; 15
 312:	0e 94 49 01 	call	0x292	; 0x292 <LCD_SendCommend>
 316:	8a e0       	ldi	r24, 0x0A	; 10
 318:	8a 95       	dec	r24
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_init+0x42>
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 49 01 	call	0x292	; 0x292 <LCD_SendCommend>
 322:	8b e4       	ldi	r24, 0x4B	; 75
 324:	9d e1       	ldi	r25, 0x1D	; 29
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <LCD_init+0x50>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <LCD_init+0x56>
 32c:	00 00       	nop
 32e:	86 e0       	ldi	r24, 0x06	; 6
 330:	0e 94 49 01 	call	0x292	; 0x292 <LCD_SendCommend>
 334:	8b e4       	ldi	r24, 0x4B	; 75
 336:	9d e1       	ldi	r25, 0x1D	; 29
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <LCD_init+0x62>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <LCD_init+0x68>
 33e:	00 00       	nop
 340:	08 95       	ret

00000342 <LCD_voidWriteNumber>:




void LCD_voidWriteNumber(u32 copy_u32Number){
 342:	8f 92       	push	r8
 344:	9f 92       	push	r9
 346:	af 92       	push	r10
 348:	bf 92       	push	r11
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	2a 97       	sbiw	r28, 0x0a	; 10
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
	u8 arr[10];
	u8 i = 0;
	for(i=0;copy_u32Number!=0;i++){
 364:	61 15       	cp	r22, r1
 366:	71 05       	cpc	r23, r1
 368:	81 05       	cpc	r24, r1
 36a:	91 05       	cpc	r25, r1
 36c:	d9 f1       	breq	.+118    	; 0x3e4 <LCD_voidWriteNumber+0xa2>
 36e:	f1 2c       	mov	r15, r1
		arr[i] = (copy_u32Number%10)+48;
 370:	0f 2e       	mov	r0, r31
 372:	fa e0       	ldi	r31, 0x0A	; 10
 374:	8f 2e       	mov	r8, r31
 376:	91 2c       	mov	r9, r1
 378:	a1 2c       	mov	r10, r1
 37a:	b1 2c       	mov	r11, r1
 37c:	f0 2d       	mov	r31, r0
 37e:	01 c0       	rjmp	.+2      	; 0x382 <LCD_voidWriteNumber+0x40>


void LCD_voidWriteNumber(u32 copy_u32Number){
	u8 arr[10];
	u8 i = 0;
	for(i=0;copy_u32Number!=0;i++){
 380:	f0 2e       	mov	r15, r16
		arr[i] = (copy_u32Number%10)+48;
 382:	01 e0       	ldi	r16, 0x01	; 1
 384:	10 e0       	ldi	r17, 0x00	; 0
 386:	0c 0f       	add	r16, r28
 388:	1d 1f       	adc	r17, r29
 38a:	0f 0d       	add	r16, r15
 38c:	11 1d       	adc	r17, r1
 38e:	a5 01       	movw	r20, r10
 390:	94 01       	movw	r18, r8
 392:	0e 94 c5 03 	call	0x78a	; 0x78a <__udivmodsi4>
 396:	60 5d       	subi	r22, 0xD0	; 208
 398:	f8 01       	movw	r30, r16
 39a:	60 83       	st	Z, r22
		//LCD_SendData(arr[i]);
		copy_u32Number/=10;
 39c:	62 2f       	mov	r22, r18
 39e:	73 2f       	mov	r23, r19
 3a0:	84 2f       	mov	r24, r20
 3a2:	95 2f       	mov	r25, r21


void LCD_voidWriteNumber(u32 copy_u32Number){
	u8 arr[10];
	u8 i = 0;
	for(i=0;copy_u32Number!=0;i++){
 3a4:	01 e0       	ldi	r16, 0x01	; 1
 3a6:	0f 0d       	add	r16, r15
 3a8:	61 15       	cp	r22, r1
 3aa:	71 05       	cpc	r23, r1
 3ac:	81 05       	cpc	r24, r1
 3ae:	91 05       	cpc	r25, r1
 3b0:	39 f7       	brne	.-50     	; 0x380 <LCD_voidWriteNumber+0x3e>
		arr[i] = (copy_u32Number%10)+48;
		//LCD_SendData(arr[i]);
		copy_u32Number/=10;
	}
	for(u8 j=0;j<i;j++){
 3b2:	00 23       	and	r16, r16
 3b4:	b9 f0       	breq	.+46     	; 0x3e4 <LCD_voidWriteNumber+0xa2>
 3b6:	10 e0       	ldi	r17, 0x00	; 0
 3b8:	58 01       	movw	r10, r16
 3ba:	f1 e0       	ldi	r31, 0x01	; 1
 3bc:	af 1a       	sub	r10, r31
 3be:	b1 08       	sbc	r11, r1
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	8c 0f       	add	r24, r28
 3c6:	9d 1f       	adc	r25, r29
 3c8:	08 0f       	add	r16, r24
 3ca:	19 1f       	adc	r17, r25
 3cc:	af 18       	sub	r10, r15
 3ce:	b1 08       	sbc	r11, r1
 3d0:	a8 0e       	add	r10, r24
 3d2:	b9 1e       	adc	r11, r25
		LCD_SendData(arr[i-j-1]);
 3d4:	f8 01       	movw	r30, r16
 3d6:	82 91       	ld	r24, -Z
 3d8:	8f 01       	movw	r16, r30
 3da:	0e 94 11 01 	call	0x222	; 0x222 <LCD_SendData>
	for(i=0;copy_u32Number!=0;i++){
		arr[i] = (copy_u32Number%10)+48;
		//LCD_SendData(arr[i]);
		copy_u32Number/=10;
	}
	for(u8 j=0;j<i;j++){
 3de:	0a 15       	cp	r16, r10
 3e0:	1b 05       	cpc	r17, r11
 3e2:	c1 f7       	brne	.-16     	; 0x3d4 <LCD_voidWriteNumber+0x92>
		LCD_SendData(arr[i-j-1]);
	}
}
 3e4:	2a 96       	adiw	r28, 0x0a	; 10
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	ff 90       	pop	r15
 3fa:	bf 90       	pop	r11
 3fc:	af 90       	pop	r10
 3fe:	9f 90       	pop	r9
 400:	8f 90       	pop	r8
 402:	08 95       	ret

00000404 <LCD_voidClear>:


void LCD_voidClear(void){
	LCD_SendCommend(0b00000001);  //
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 49 01 	call	0x292	; 0x292 <LCD_SendCommend>
 40a:	83 ef       	ldi	r24, 0xF3	; 243
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <LCD_voidClear+0xa>
 412:	00 c0       	rjmp	.+0      	; 0x414 <LCD_voidClear+0x10>
 414:	00 00       	nop
 416:	08 95       	ret

00000418 <main>:
// 		}
// 	}
// 	
int main(void)
{
	DIO_Init();
 418:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_Init>
	//SRVM_voidOn (90);
	//SRVM_voidOff();
	TMR1_Init();
 41c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <TMR1_Init>
	LCD_init();
 420:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_init>
	 	//TMR1_voidStart();
	BUZZER_PlayTrack();
 424:	0e 94 54 00 	call	0xa8	; 0xa8 <BUZZER_PlayTrack>
 428:	ff cf       	rjmp	.-2      	; 0x428 <main+0x10>

0000042a <Dio_SetPinMode>:
{
	
	Pin_Type Port_Index = Pin_ID / 8;
	Pin_Type Pin_Index  = Pin_ID % 8;
	
	*ReadBufferPTR = GetBit(*DIO_RegPIN[Port_Index],Pin_Index);
 42a:	28 2f       	mov	r18, r24
 42c:	26 95       	lsr	r18
 42e:	26 95       	lsr	r18
 430:	26 95       	lsr	r18
 432:	87 70       	andi	r24, 0x07	; 7
 434:	61 30       	cpi	r22, 0x01	; 1
 436:	39 f1       	breq	.+78     	; 0x486 <Dio_SetPinMode+0x5c>
 438:	38 f0       	brcs	.+14     	; 0x448 <Dio_SetPinMode+0x1e>
 43a:	62 30       	cpi	r22, 0x02	; 2
 43c:	09 f4       	brne	.+2      	; 0x440 <Dio_SetPinMode+0x16>
 43e:	43 c0       	rjmp	.+134    	; 0x4c6 <Dio_SetPinMode+0x9c>
 440:	63 30       	cpi	r22, 0x03	; 3
 442:	09 f4       	brne	.+2      	; 0x446 <Dio_SetPinMode+0x1c>
 444:	57 c0       	rjmp	.+174    	; 0x4f4 <Dio_SetPinMode+0xca>
 446:	08 95       	ret
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	22 0f       	add	r18, r18
 44c:	33 1f       	adc	r19, r19
 44e:	f9 01       	movw	r30, r18
 450:	e4 54       	subi	r30, 0x44	; 68
 452:	fc 4f       	sbci	r31, 0xFC	; 252
 454:	01 90       	ld	r0, Z+
 456:	f0 81       	ld	r31, Z
 458:	e0 2d       	mov	r30, r0
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	ba 01       	movw	r22, r20
 460:	02 c0       	rjmp	.+4      	; 0x466 <Dio_SetPinMode+0x3c>
 462:	66 0f       	add	r22, r22
 464:	77 1f       	adc	r23, r23
 466:	8a 95       	dec	r24
 468:	e2 f7       	brpl	.-8      	; 0x462 <Dio_SetPinMode+0x38>
 46a:	cb 01       	movw	r24, r22
 46c:	90 81       	ld	r25, Z
 46e:	98 2b       	or	r25, r24
 470:	90 83       	st	Z, r25
 472:	f9 01       	movw	r30, r18
 474:	ec 53       	subi	r30, 0x3C	; 60
 476:	fc 4f       	sbci	r31, 0xFC	; 252
 478:	01 90       	ld	r0, Z+
 47a:	f0 81       	ld	r31, Z
 47c:	e0 2d       	mov	r30, r0
 47e:	90 81       	ld	r25, Z
 480:	89 2b       	or	r24, r25
 482:	80 83       	st	Z, r24
 484:	08 95       	ret
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	22 0f       	add	r18, r18
 48a:	33 1f       	adc	r19, r19
 48c:	f9 01       	movw	r30, r18
 48e:	e4 54       	subi	r30, 0x44	; 68
 490:	fc 4f       	sbci	r31, 0xFC	; 252
 492:	01 90       	ld	r0, Z+
 494:	f0 81       	ld	r31, Z
 496:	e0 2d       	mov	r30, r0
 498:	41 e0       	ldi	r20, 0x01	; 1
 49a:	50 e0       	ldi	r21, 0x00	; 0
 49c:	ba 01       	movw	r22, r20
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <Dio_SetPinMode+0x7a>
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	8a 95       	dec	r24
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <Dio_SetPinMode+0x76>
 4a8:	cb 01       	movw	r24, r22
 4aa:	90 81       	ld	r25, Z
 4ac:	98 2b       	or	r25, r24
 4ae:	90 83       	st	Z, r25
 4b0:	f9 01       	movw	r30, r18
 4b2:	ec 53       	subi	r30, 0x3C	; 60
 4b4:	fc 4f       	sbci	r31, 0xFC	; 252
 4b6:	01 90       	ld	r0, Z+
 4b8:	f0 81       	ld	r31, Z
 4ba:	e0 2d       	mov	r30, r0
 4bc:	80 95       	com	r24
 4be:	90 81       	ld	r25, Z
 4c0:	89 23       	and	r24, r25
 4c2:	80 83       	st	Z, r24
 4c4:	08 95       	ret
 4c6:	e2 2f       	mov	r30, r18
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	e4 54       	subi	r30, 0x44	; 68
 4d0:	fc 4f       	sbci	r31, 0xFC	; 252
 4d2:	01 90       	ld	r0, Z+
 4d4:	f0 81       	ld	r31, Z
 4d6:	e0 2d       	mov	r30, r0
 4d8:	21 e0       	ldi	r18, 0x01	; 1
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	a9 01       	movw	r20, r18
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <Dio_SetPinMode+0xba>
 4e0:	44 0f       	add	r20, r20
 4e2:	55 1f       	adc	r21, r21
 4e4:	8a 95       	dec	r24
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <Dio_SetPinMode+0xb6>
 4e8:	ca 01       	movw	r24, r20
 4ea:	80 95       	com	r24
 4ec:	90 81       	ld	r25, Z
 4ee:	89 23       	and	r24, r25
 4f0:	80 83       	st	Z, r24
 4f2:	08 95       	ret
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	22 0f       	add	r18, r18
 4f8:	33 1f       	adc	r19, r19
 4fa:	f9 01       	movw	r30, r18
 4fc:	e4 54       	subi	r30, 0x44	; 68
 4fe:	fc 4f       	sbci	r31, 0xFC	; 252
 500:	01 90       	ld	r0, Z+
 502:	f0 81       	ld	r31, Z
 504:	e0 2d       	mov	r30, r0
 506:	41 e0       	ldi	r20, 0x01	; 1
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	ba 01       	movw	r22, r20
 50c:	02 c0       	rjmp	.+4      	; 0x512 <Dio_SetPinMode+0xe8>
 50e:	66 0f       	add	r22, r22
 510:	77 1f       	adc	r23, r23
 512:	8a 95       	dec	r24
 514:	e2 f7       	brpl	.-8      	; 0x50e <Dio_SetPinMode+0xe4>
 516:	cb 01       	movw	r24, r22
 518:	80 95       	com	r24
 51a:	90 81       	ld	r25, Z
 51c:	98 23       	and	r25, r24
 51e:	90 83       	st	Z, r25
 520:	f9 01       	movw	r30, r18
 522:	ec 53       	subi	r30, 0x3C	; 60
 524:	fc 4f       	sbci	r31, 0xFC	; 252
 526:	01 90       	ld	r0, Z+
 528:	f0 81       	ld	r31, Z
 52a:	e0 2d       	mov	r30, r0
 52c:	90 81       	ld	r25, Z
 52e:	89 23       	and	r24, r25
 530:	80 83       	st	Z, r24
 532:	08 95       	ret

00000534 <DIO_Init>:
 534:	0f 93       	push	r16
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
 53a:	0c e8       	ldi	r16, 0x8C	; 140
 53c:	13 e0       	ldi	r17, 0x03	; 3
 53e:	c0 e0       	ldi	r28, 0x00	; 0
 540:	f8 01       	movw	r30, r16
 542:	61 91       	ld	r22, Z+
 544:	8f 01       	movw	r16, r30
 546:	8c 2f       	mov	r24, r28
 548:	0e 94 15 02 	call	0x42a	; 0x42a <Dio_SetPinMode>
 54c:	cf 5f       	subi	r28, 0xFF	; 255
 54e:	c0 32       	cpi	r28, 0x20	; 32
 550:	b9 f7       	brne	.-18     	; 0x540 <DIO_Init+0xc>
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	08 95       	ret

0000055a <DIO_WritePinVal>:
}

void DIO_WritePinVal(Pin_Type Pin_ID ,u8 VALUE )
{
	
	Pin_Type Port_Index = Pin_ID / 8;
 55a:	e8 2f       	mov	r30, r24
 55c:	e6 95       	lsr	r30
 55e:	e6 95       	lsr	r30
 560:	e6 95       	lsr	r30
	Pin_Type Pin_Index  = Pin_ID % 8;
 562:	87 70       	andi	r24, 0x07	; 7
	if (VALUE==HIGH)
 564:	61 30       	cpi	r22, 0x01	; 1
 566:	a9 f4       	brne	.+42     	; 0x592 <DIO_WritePinVal+0x38>
	{
		SetBit(*DIO_RegPORT[Port_Index],Pin_Index);
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	ee 0f       	add	r30, r30
 56c:	ff 1f       	adc	r31, r31
 56e:	ec 53       	subi	r30, 0x3C	; 60
 570:	fc 4f       	sbci	r31, 0xFC	; 252
 572:	01 90       	ld	r0, Z+
 574:	f0 81       	ld	r31, Z
 576:	e0 2d       	mov	r30, r0
 578:	21 e0       	ldi	r18, 0x01	; 1
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	a9 01       	movw	r20, r18
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_WritePinVal+0x2a>
 580:	44 0f       	add	r20, r20
 582:	55 1f       	adc	r21, r21
 584:	8a 95       	dec	r24
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_WritePinVal+0x26>
 588:	ca 01       	movw	r24, r20
 58a:	90 81       	ld	r25, Z
 58c:	89 2b       	or	r24, r25
 58e:	80 83       	st	Z, r24
 590:	08 95       	ret
	}
	else if (VALUE==LOW)
 592:	61 11       	cpse	r22, r1
 594:	15 c0       	rjmp	.+42     	; 0x5c0 <DIO_WritePinVal+0x66>
	{
		ClrBit(*DIO_RegPORT[Port_Index],Pin_Index);
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	ee 0f       	add	r30, r30
 59a:	ff 1f       	adc	r31, r31
 59c:	ec 53       	subi	r30, 0x3C	; 60
 59e:	fc 4f       	sbci	r31, 0xFC	; 252
 5a0:	01 90       	ld	r0, Z+
 5a2:	f0 81       	ld	r31, Z
 5a4:	e0 2d       	mov	r30, r0
 5a6:	21 e0       	ldi	r18, 0x01	; 1
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	a9 01       	movw	r20, r18
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_WritePinVal+0x58>
 5ae:	44 0f       	add	r20, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	8a 95       	dec	r24
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_WritePinVal+0x54>
 5b6:	ca 01       	movw	r24, r20
 5b8:	80 95       	com	r24
 5ba:	90 81       	ld	r25, Z
 5bc:	89 23       	and	r24, r25
 5be:	80 83       	st	Z, r24
 5c0:	08 95       	ret

000005c2 <__vector_11>:
	}
}


 void __vector_11(void) __attribute__((signal));
 void __vector_11(void){
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	2f 93       	push	r18
 5ce:	3f 93       	push	r19
 5d0:	4f 93       	push	r20
 5d2:	5f 93       	push	r21
 5d4:	6f 93       	push	r22
 5d6:	7f 93       	push	r23
 5d8:	8f 93       	push	r24
 5da:	9f 93       	push	r25
 5dc:	af 93       	push	r26
 5de:	bf 93       	push	r27
 5e0:	ef 93       	push	r30
 5e2:	ff 93       	push	r31
	 static u16 OvfCounter = 0 ;
	 OvfCounter++;
 5e4:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <OvfCounter.1632>
 5e8:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <OvfCounter.1632+0x1>
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <OvfCounter.1632+0x1>
 5f2:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <OvfCounter.1632>

	 if (TMR0_OVFCounter == OvfCounter)
 5f6:	83 31       	cpi	r24, 0x13	; 19
 5f8:	93 41       	sbci	r25, 0x13	; 19
 5fa:	79 f4       	brne	.+30     	; 0x61a <__vector_11+0x58>
	 {
		 TCNT0 =  Timer0_Preload;
 5fc:	81 e3       	ldi	r24, 0x31	; 49
 5fe:	82 bf       	out	0x32, r24	; 50
		 
		 //clear counter
		 OvfCounter = 0;
 600:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <OvfCounter.1632+0x1>
 604:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <OvfCounter.1632>
		 if (prv_callbackovf != NUL)
 608:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <prv_callbackovf>
 60c:	f0 91 af 03 	lds	r31, 0x03AF	; 0x8003af <prv_callbackovf+0x1>
 610:	ec 34       	cpi	r30, 0x4C	; 76
 612:	8c e4       	ldi	r24, 0x4C	; 76
 614:	f8 07       	cpc	r31, r24
 616:	09 f0       	breq	.+2      	; 0x61a <__vector_11+0x58>
		 {
			 prv_callbackovf();
 618:	09 95       	icall
		 
		 // call action
	 }
	 
	 
 }
 61a:	ff 91       	pop	r31
 61c:	ef 91       	pop	r30
 61e:	bf 91       	pop	r27
 620:	af 91       	pop	r26
 622:	9f 91       	pop	r25
 624:	8f 91       	pop	r24
 626:	7f 91       	pop	r23
 628:	6f 91       	pop	r22
 62a:	5f 91       	pop	r21
 62c:	4f 91       	pop	r20
 62e:	3f 91       	pop	r19
 630:	2f 91       	pop	r18
 632:	0f 90       	pop	r0
 634:	0f be       	out	0x3f, r0	; 63
 636:	0f 90       	pop	r0
 638:	1f 90       	pop	r1
 63a:	18 95       	reti

0000063c <__vector_10>:
 
 
 
 
  void __vector_10(void) __attribute__((signal));
  void __vector_10(void){
 63c:	1f 92       	push	r1
 63e:	0f 92       	push	r0
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	0f 92       	push	r0
 644:	11 24       	eor	r1, r1
 646:	2f 93       	push	r18
 648:	3f 93       	push	r19
 64a:	4f 93       	push	r20
 64c:	5f 93       	push	r21
 64e:	6f 93       	push	r22
 650:	7f 93       	push	r23
 652:	8f 93       	push	r24
 654:	9f 93       	push	r25
 656:	af 93       	push	r26
 658:	bf 93       	push	r27
 65a:	ef 93       	push	r30
 65c:	ff 93       	push	r31
	  static u16 CTCCounter = 0 ;
	  CTCCounter++;
 65e:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
 662:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <__data_end+0x1>
 666:	01 96       	adiw	r24, 0x01	; 1
 668:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <__data_end+0x1>
 66c:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <__data_end>

	  if (prv_TMR0_CTCCounter == CTCCounter)
 670:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <prv_TMR0_CTCCounter>
 674:	30 91 d1 03 	lds	r19, 0x03D1	; 0x8003d1 <prv_TMR0_CTCCounter+0x1>
 678:	82 17       	cp	r24, r18
 67a:	93 07       	cpc	r25, r19
 67c:	69 f4       	brne	.+26     	; 0x698 <__vector_10+0x5c>
	  {
		  
		  //clear counter
		  CTCCounter = 0;
 67e:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <__data_end+0x1>
 682:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <__data_end>
		  if (prv_callbackCTC != NUL)
 686:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <prv_callbackCTC>
 68a:	f0 91 ad 03 	lds	r31, 0x03AD	; 0x8003ad <prv_callbackCTC+0x1>
 68e:	ec 34       	cpi	r30, 0x4C	; 76
 690:	8c e4       	ldi	r24, 0x4C	; 76
 692:	f8 07       	cpc	r31, r24
 694:	09 f0       	breq	.+2      	; 0x698 <__vector_10+0x5c>
		  {
			  prv_callbackCTC();
 696:	09 95       	icall
		  
		  // call action
	  }
	  
	  
  }
 698:	ff 91       	pop	r31
 69a:	ef 91       	pop	r30
 69c:	bf 91       	pop	r27
 69e:	af 91       	pop	r26
 6a0:	9f 91       	pop	r25
 6a2:	8f 91       	pop	r24
 6a4:	7f 91       	pop	r23
 6a6:	6f 91       	pop	r22
 6a8:	5f 91       	pop	r21
 6aa:	4f 91       	pop	r20
 6ac:	3f 91       	pop	r19
 6ae:	2f 91       	pop	r18
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <TMR1_Init>:
}



void buzzer_start() {
	DIO_WritePinVal(Pin_C6,HIGH);  // Set the buzzer pin as an output
 6ba:	8f b5       	in	r24, 0x2f	; 47
 6bc:	8e 7f       	andi	r24, 0xFE	; 254
 6be:	8f bd       	out	0x2f, r24	; 47
 6c0:	8f b5       	in	r24, 0x2f	; 47
 6c2:	82 60       	ori	r24, 0x02	; 2
 6c4:	8f bd       	out	0x2f, r24	; 47
 6c6:	8e b5       	in	r24, 0x2e	; 46
 6c8:	88 60       	ori	r24, 0x08	; 8
 6ca:	8e bd       	out	0x2e, r24	; 46
 6cc:	8e b5       	in	r24, 0x2e	; 46
 6ce:	80 61       	ori	r24, 0x10	; 16
 6d0:	8e bd       	out	0x2e, r24	; 46
 6d2:	8f b5       	in	r24, 0x2f	; 47
 6d4:	8f 7b       	andi	r24, 0xBF	; 191
 6d6:	8f bd       	out	0x2f, r24	; 47
 6d8:	8f b5       	in	r24, 0x2f	; 47
 6da:	80 68       	ori	r24, 0x80	; 128
 6dc:	8f bd       	out	0x2f, r24	; 47
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	94 e0       	ldi	r25, 0x04	; 4
 6e2:	97 bd       	out	0x27, r25	; 39
 6e4:	86 bd       	out	0x26, r24	; 38
 6e6:	08 95       	ret

000006e8 <TMR1_voidStart>:
 6e8:	8e b5       	in	r24, 0x2e	; 46
 6ea:	81 60       	ori	r24, 0x01	; 1
 6ec:	8e bd       	out	0x2e, r24	; 46
 6ee:	8e b5       	in	r24, 0x2e	; 46
 6f0:	82 60       	ori	r24, 0x02	; 2
 6f2:	8e bd       	out	0x2e, r24	; 46
 6f4:	8e b5       	in	r24, 0x2e	; 46
 6f6:	8b 7f       	andi	r24, 0xFB	; 251
 6f8:	8e bd       	out	0x2e, r24	; 46
 6fa:	08 95       	ret

000006fc <TMR1_voidStop>:
 6fc:	8e b5       	in	r24, 0x2e	; 46
 6fe:	8e 7f       	andi	r24, 0xFE	; 254
 700:	8e bd       	out	0x2e, r24	; 46
 702:	8e b5       	in	r24, 0x2e	; 46
 704:	8d 7f       	andi	r24, 0xFD	; 253
 706:	8e bd       	out	0x2e, r24	; 46
 708:	8e b5       	in	r24, 0x2e	; 46
 70a:	8b 7f       	andi	r24, 0xFB	; 251
 70c:	8e bd       	out	0x2e, r24	; 46
 70e:	08 95       	ret

00000710 <TMR1_voidSetFrequencyA_FASTPWM>:
 710:	9c 01       	movw	r18, r24
 712:	40 e0       	ldi	r20, 0x00	; 0
 714:	50 e0       	ldi	r21, 0x00	; 0
 716:	60 e9       	ldi	r22, 0x90	; 144
 718:	70 ed       	ldi	r23, 0xD0	; 208
 71a:	83 e0       	ldi	r24, 0x03	; 3
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 c5 03 	call	0x78a	; 0x78a <__udivmodsi4>
 722:	21 50       	subi	r18, 0x01	; 1
 724:	31 09       	sbc	r19, r1
 726:	37 bd       	out	0x27, r19	; 39
 728:	26 bd       	out	0x26, r18	; 38
 72a:	08 95       	ret

0000072c <setHalfDutyCycle>:
}

void setHalfDutyCycle() {
	OCR1A_u16 = ICR1_u16/2;
 72c:	86 b5       	in	r24, 0x26	; 38
 72e:	97 b5       	in	r25, 0x27	; 39
 730:	96 95       	lsr	r25
 732:	87 95       	ror	r24
 734:	9b bd       	out	0x2b, r25	; 43
 736:	8a bd       	out	0x2a, r24	; 42
 738:	08 95       	ret

0000073a <__udivmodhi4>:
 73a:	aa 1b       	sub	r26, r26
 73c:	bb 1b       	sub	r27, r27
 73e:	51 e1       	ldi	r21, 0x11	; 17
 740:	07 c0       	rjmp	.+14     	; 0x750 <__udivmodhi4_ep>

00000742 <__udivmodhi4_loop>:
 742:	aa 1f       	adc	r26, r26
 744:	bb 1f       	adc	r27, r27
 746:	a6 17       	cp	r26, r22
 748:	b7 07       	cpc	r27, r23
 74a:	10 f0       	brcs	.+4      	; 0x750 <__udivmodhi4_ep>
 74c:	a6 1b       	sub	r26, r22
 74e:	b7 0b       	sbc	r27, r23

00000750 <__udivmodhi4_ep>:
 750:	88 1f       	adc	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	5a 95       	dec	r21
 756:	a9 f7       	brne	.-22     	; 0x742 <__udivmodhi4_loop>
 758:	80 95       	com	r24
 75a:	90 95       	com	r25
 75c:	bc 01       	movw	r22, r24
 75e:	cd 01       	movw	r24, r26
 760:	08 95       	ret

00000762 <__divmodhi4>:
 762:	97 fb       	bst	r25, 7
 764:	07 2e       	mov	r0, r23
 766:	16 f4       	brtc	.+4      	; 0x76c <__divmodhi4+0xa>
 768:	00 94       	com	r0
 76a:	07 d0       	rcall	.+14     	; 0x77a <__divmodhi4_neg1>
 76c:	77 fd       	sbrc	r23, 7
 76e:	09 d0       	rcall	.+18     	; 0x782 <__divmodhi4_neg2>
 770:	0e 94 9d 03 	call	0x73a	; 0x73a <__udivmodhi4>
 774:	07 fc       	sbrc	r0, 7
 776:	05 d0       	rcall	.+10     	; 0x782 <__divmodhi4_neg2>
 778:	3e f4       	brtc	.+14     	; 0x788 <__divmodhi4_exit>

0000077a <__divmodhi4_neg1>:
 77a:	90 95       	com	r25
 77c:	81 95       	neg	r24
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	08 95       	ret

00000782 <__divmodhi4_neg2>:
 782:	70 95       	com	r23
 784:	61 95       	neg	r22
 786:	7f 4f       	sbci	r23, 0xFF	; 255

00000788 <__divmodhi4_exit>:
 788:	08 95       	ret

0000078a <__udivmodsi4>:
 78a:	a1 e2       	ldi	r26, 0x21	; 33
 78c:	1a 2e       	mov	r1, r26
 78e:	aa 1b       	sub	r26, r26
 790:	bb 1b       	sub	r27, r27
 792:	fd 01       	movw	r30, r26
 794:	0d c0       	rjmp	.+26     	; 0x7b0 <__udivmodsi4_ep>

00000796 <__udivmodsi4_loop>:
 796:	aa 1f       	adc	r26, r26
 798:	bb 1f       	adc	r27, r27
 79a:	ee 1f       	adc	r30, r30
 79c:	ff 1f       	adc	r31, r31
 79e:	a2 17       	cp	r26, r18
 7a0:	b3 07       	cpc	r27, r19
 7a2:	e4 07       	cpc	r30, r20
 7a4:	f5 07       	cpc	r31, r21
 7a6:	20 f0       	brcs	.+8      	; 0x7b0 <__udivmodsi4_ep>
 7a8:	a2 1b       	sub	r26, r18
 7aa:	b3 0b       	sbc	r27, r19
 7ac:	e4 0b       	sbc	r30, r20
 7ae:	f5 0b       	sbc	r31, r21

000007b0 <__udivmodsi4_ep>:
 7b0:	66 1f       	adc	r22, r22
 7b2:	77 1f       	adc	r23, r23
 7b4:	88 1f       	adc	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	1a 94       	dec	r1
 7ba:	69 f7       	brne	.-38     	; 0x796 <__udivmodsi4_loop>
 7bc:	60 95       	com	r22
 7be:	70 95       	com	r23
 7c0:	80 95       	com	r24
 7c2:	90 95       	com	r25
 7c4:	9b 01       	movw	r18, r22
 7c6:	ac 01       	movw	r20, r24
 7c8:	bd 01       	movw	r22, r26
 7ca:	cf 01       	movw	r24, r30
 7cc:	08 95       	ret

000007ce <_exit>:
 7ce:	f8 94       	cli

000007d0 <__stop_program>:
 7d0:	ff cf       	rjmp	.-2      	; 0x7d0 <__stop_program>
