
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  0000049a  0000052e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800094  00800094  00000562  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001719  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000990  00000000  00000000  00001e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000948  00000000  00000000  000027c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  0000310c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ae  00000000  00000000  00003400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca1  00000000  00000000  00003cae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000494f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_10>
  2c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 39       	cpi	r26, 0x9B	; 155
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
  8a:	0c 94 4b 02 	jmp	0x496	; 0x496 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_SendData>:



///////////////////////////////////SENDING///////////////////////////////////////

void LCD_SendData(u8 Val_u8){
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	DIO_WritePinVal(RS,HIGH);
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_WritePinVal>
static void Private_LCDHalfPort(u8 copy_u8value){
// 	DIO_WritePinVal(LCD_D4,GetBit(copy_u8value,0));
// 	DIO_WritePinVal(LCD_D5,GetBit(copy_u8value,1));
// 	DIO_WritePinVal(LCD_D6,GetBit(copy_u8value,2));
// 	DIO_WritePinVal(LCD_D7,GetBit(copy_u8value,3));
SPI_u8SendRecieveByte(copy_u8value,&Garbage);
  9e:	6a e9       	ldi	r22, 0x9A	; 154
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	8c 2f       	mov	r24, r28
  a4:	82 95       	swap	r24
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	0e 94 c2 01 	call	0x384	; 0x384 <SPI_u8SendRecieveByte>
///////////////////////////////////SENDING///////////////////////////////////////

void LCD_SendData(u8 Val_u8){
	DIO_WritePinVal(RS,HIGH);
	Private_LCDHalfPort(Val_u8>>4);
	DIO_WritePinVal(EN,HIGH);
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_WritePinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	81 ee       	ldi	r24, 0xE1	; 225
  b6:	94 e0       	ldi	r25, 0x04	; 4
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_SendData+0x26>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_SendData+0x2c>
  be:	00 00       	nop
	_delay_ms(5);
 	DIO_WritePinVal(EN,LOW);
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_WritePinVal>
  c8:	81 ee       	ldi	r24, 0xE1	; 225
  ca:	94 e0       	ldi	r25, 0x04	; 4
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_SendData+0x3a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_SendData+0x40>
  d2:	00 00       	nop
static void Private_LCDHalfPort(u8 copy_u8value){
// 	DIO_WritePinVal(LCD_D4,GetBit(copy_u8value,0));
// 	DIO_WritePinVal(LCD_D5,GetBit(copy_u8value,1));
// 	DIO_WritePinVal(LCD_D6,GetBit(copy_u8value,2));
// 	DIO_WritePinVal(LCD_D7,GetBit(copy_u8value,3));
SPI_u8SendRecieveByte(copy_u8value,&Garbage);
  d4:	6a e9       	ldi	r22, 0x9A	; 154
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	8c 2f       	mov	r24, r28
  da:	0e 94 c2 01 	call	0x384	; 0x384 <SPI_u8SendRecieveByte>
	DIO_WritePinVal(EN,HIGH);
	_delay_ms(5);
 	DIO_WritePinVal(EN,LOW);
	_delay_ms(5);
	Private_LCDHalfPort(Val_u8);
	DIO_WritePinVal(EN,HIGH);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_WritePinVal>
  e6:	81 ee       	ldi	r24, 0xE1	; 225
  e8:	94 e0       	ldi	r25, 0x04	; 4
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_SendData+0x58>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_SendData+0x5e>
  f0:	00 00       	nop
	_delay_ms(5);
	DIO_WritePinVal(EN,LOW);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_WritePinVal>
  fa:	81 ee       	ldi	r24, 0xE1	; 225
  fc:	94 e0       	ldi	r25, 0x04	; 4
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_SendData+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_SendData+0x72>
 104:	00 00       	nop
	_delay_ms(5);
}
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <LCD_SendCommend>:

void LCD_SendCommend(u8 Val_u8){
 10a:	cf 93       	push	r28
 10c:	c8 2f       	mov	r28, r24
	DIO_WritePinVal(RS,LOW);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_WritePinVal>
static void Private_LCDHalfPort(u8 copy_u8value){
// 	DIO_WritePinVal(LCD_D4,GetBit(copy_u8value,0));
// 	DIO_WritePinVal(LCD_D5,GetBit(copy_u8value,1));
// 	DIO_WritePinVal(LCD_D6,GetBit(copy_u8value,2));
// 	DIO_WritePinVal(LCD_D7,GetBit(copy_u8value,3));
SPI_u8SendRecieveByte(copy_u8value,&Garbage);
 116:	6a e9       	ldi	r22, 0x9A	; 154
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	8c 2f       	mov	r24, r28
 11c:	82 95       	swap	r24
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	0e 94 c2 01 	call	0x384	; 0x384 <SPI_u8SendRecieveByte>
}

void LCD_SendCommend(u8 Val_u8){
	DIO_WritePinVal(RS,LOW);
	Private_LCDHalfPort(Val_u8>>4);
	DIO_WritePinVal(EN,HIGH);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_WritePinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	00 00       	nop
	_delay_us(1);
	DIO_WritePinVal(EN,LOW);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_WritePinVal>
static void Private_LCDHalfPort(u8 copy_u8value){
// 	DIO_WritePinVal(LCD_D4,GetBit(copy_u8value,0));
// 	DIO_WritePinVal(LCD_D5,GetBit(copy_u8value,1));
// 	DIO_WritePinVal(LCD_D6,GetBit(copy_u8value,2));
// 	DIO_WritePinVal(LCD_D7,GetBit(copy_u8value,3));
SPI_u8SendRecieveByte(copy_u8value,&Garbage);
 136:	6a e9       	ldi	r22, 0x9A	; 154
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	8c 2f       	mov	r24, r28
 13c:	0e 94 c2 01 	call	0x384	; 0x384 <SPI_u8SendRecieveByte>
	_delay_us(1);
	DIO_WritePinVal(EN,LOW);
	
	//_delay_ms(1);
	Private_LCDHalfPort(Val_u8);
	DIO_WritePinVal(EN,HIGH);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_WritePinVal>
 148:	00 00       	nop
	_delay_us(1);

	DIO_WritePinVal(EN,LOW);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_WritePinVal>
	
	//_delay_ms(1);
}
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	8b e4       	ldi	r24, 0x4B	; 75
 158:	9d e1       	ldi	r25, 0x1D	; 29
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_init+0x4>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_init+0xa>
 160:	00 00       	nop
static void Private_LCDHalfPort(u8 copy_u8value){
// 	DIO_WritePinVal(LCD_D4,GetBit(copy_u8value,0));
// 	DIO_WritePinVal(LCD_D5,GetBit(copy_u8value,1));
// 	DIO_WritePinVal(LCD_D6,GetBit(copy_u8value,2));
// 	DIO_WritePinVal(LCD_D7,GetBit(copy_u8value,3));
SPI_u8SendRecieveByte(copy_u8value,&Garbage);
 162:	6a e9       	ldi	r22, 0x9A	; 154
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 c2 01 	call	0x384	; 0x384 <SPI_u8SendRecieveByte>


void LCD_init(void){
	_delay_ms(30);
	Private_LCDHalfPort(0b0010);
	DIO_WritePinVal(EN,HIGH);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_WritePinVal>
 174:	8b e4       	ldi	r24, 0x4B	; 75
 176:	9d e1       	ldi	r25, 0x1D	; 29
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_init+0x22>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_init+0x28>
 17e:	00 00       	nop
	_delay_ms(30);
	DIO_WritePinVal(EN,LOW);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_WritePinVal>
	LCD_SendCommend(0b00101000);//last2
 188:	88 e2       	ldi	r24, 0x28	; 40
 18a:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_SendCommend>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	9a e0       	ldi	r25, 0x0A	; 10
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_init+0x3a>
	_delay_us(30);
	LCD_SendCommend(0b00001111);  // last3
 194:	8f e0       	ldi	r24, 0x0F	; 15
 196:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_SendCommend>
 19a:	8a e0       	ldi	r24, 0x0A	; 10
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_init+0x46>
	_delay_us(30);
	LCD_SendCommend(0b00000001);  //
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_SendCommend>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	8b e4       	ldi	r24, 0x4B	; 75
 1a8:	9d e1       	ldi	r25, 0x1D	; 29
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_init+0x54>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_init+0x5a>
 1b0:	00 00       	nop
	_delay_ms(30);
	LCD_SendCommend(0b00000110);  //last2
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_SendCommend>
 1b8:	8b e4       	ldi	r24, 0x4B	; 75
 1ba:	9d e1       	ldi	r25, 0x1D	; 29
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_init+0x66>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_init+0x6c>
 1c2:	00 00       	nop
 1c4:	08 95       	ret

000001c6 <main>:
// 		}
// 	}
// 	
int main(void)
{
	DIO_Init();
 1c6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_Init>
	//GINTERUPTS_voidEnable();
	//TMR1_Init();
	//SRVM_voidOn(60);
	//SRVM_voidOff();
	LCD_init();
 1ca:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_init>
	SPI_voidInit();
 1ce:	0e 94 b9 01 	call	0x372	; 0x372 <SPI_voidInit>
	LCD_SendData('H');
 1d2:	88 e4       	ldi	r24, 0x48	; 72
 1d4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendData>
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <main+0x12>

000001da <Dio_SetPinMode>:
{
	
	Pin_Type Port_Index = Pin_ID / 8;
	Pin_Type Pin_Index  = Pin_ID % 8;
	
	*ReadBufferPTR = GetBit(*DIO_RegPIN[Port_Index],Pin_Index);
 1da:	28 2f       	mov	r18, r24
 1dc:	26 95       	lsr	r18
 1de:	26 95       	lsr	r18
 1e0:	26 95       	lsr	r18
 1e2:	87 70       	andi	r24, 0x07	; 7
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	39 f1       	breq	.+78     	; 0x236 <Dio_SetPinMode+0x5c>
 1e8:	38 f0       	brcs	.+14     	; 0x1f8 <Dio_SetPinMode+0x1e>
 1ea:	62 30       	cpi	r22, 0x02	; 2
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <Dio_SetPinMode+0x16>
 1ee:	43 c0       	rjmp	.+134    	; 0x276 <Dio_SetPinMode+0x9c>
 1f0:	63 30       	cpi	r22, 0x03	; 3
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <Dio_SetPinMode+0x1c>
 1f4:	57 c0       	rjmp	.+174    	; 0x2a4 <Dio_SetPinMode+0xca>
 1f6:	08 95       	ret
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	f9 01       	movw	r30, r18
 200:	ec 57       	subi	r30, 0x7C	; 124
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	01 90       	ld	r0, Z+
 206:	f0 81       	ld	r31, Z
 208:	e0 2d       	mov	r30, r0
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	ba 01       	movw	r22, r20
 210:	02 c0       	rjmp	.+4      	; 0x216 <Dio_SetPinMode+0x3c>
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <Dio_SetPinMode+0x38>
 21a:	cb 01       	movw	r24, r22
 21c:	90 81       	ld	r25, Z
 21e:	98 2b       	or	r25, r24
 220:	90 83       	st	Z, r25
 222:	f9 01       	movw	r30, r18
 224:	e4 57       	subi	r30, 0x74	; 116
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	01 90       	ld	r0, Z+
 22a:	f0 81       	ld	r31, Z
 22c:	e0 2d       	mov	r30, r0
 22e:	90 81       	ld	r25, Z
 230:	89 2b       	or	r24, r25
 232:	80 83       	st	Z, r24
 234:	08 95       	ret
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	22 0f       	add	r18, r18
 23a:	33 1f       	adc	r19, r19
 23c:	f9 01       	movw	r30, r18
 23e:	ec 57       	subi	r30, 0x7C	; 124
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	01 90       	ld	r0, Z+
 244:	f0 81       	ld	r31, Z
 246:	e0 2d       	mov	r30, r0
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	ba 01       	movw	r22, r20
 24e:	02 c0       	rjmp	.+4      	; 0x254 <Dio_SetPinMode+0x7a>
 250:	66 0f       	add	r22, r22
 252:	77 1f       	adc	r23, r23
 254:	8a 95       	dec	r24
 256:	e2 f7       	brpl	.-8      	; 0x250 <Dio_SetPinMode+0x76>
 258:	cb 01       	movw	r24, r22
 25a:	90 81       	ld	r25, Z
 25c:	98 2b       	or	r25, r24
 25e:	90 83       	st	Z, r25
 260:	f9 01       	movw	r30, r18
 262:	e4 57       	subi	r30, 0x74	; 116
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	01 90       	ld	r0, Z+
 268:	f0 81       	ld	r31, Z
 26a:	e0 2d       	mov	r30, r0
 26c:	80 95       	com	r24
 26e:	90 81       	ld	r25, Z
 270:	89 23       	and	r24, r25
 272:	80 83       	st	Z, r24
 274:	08 95       	ret
 276:	e2 2f       	mov	r30, r18
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	ec 57       	subi	r30, 0x7C	; 124
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	01 90       	ld	r0, Z+
 284:	f0 81       	ld	r31, Z
 286:	e0 2d       	mov	r30, r0
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	a9 01       	movw	r20, r18
 28e:	02 c0       	rjmp	.+4      	; 0x294 <Dio_SetPinMode+0xba>
 290:	44 0f       	add	r20, r20
 292:	55 1f       	adc	r21, r21
 294:	8a 95       	dec	r24
 296:	e2 f7       	brpl	.-8      	; 0x290 <Dio_SetPinMode+0xb6>
 298:	ca 01       	movw	r24, r20
 29a:	80 95       	com	r24
 29c:	90 81       	ld	r25, Z
 29e:	89 23       	and	r24, r25
 2a0:	80 83       	st	Z, r24
 2a2:	08 95       	ret
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	22 0f       	add	r18, r18
 2a8:	33 1f       	adc	r19, r19
 2aa:	f9 01       	movw	r30, r18
 2ac:	ec 57       	subi	r30, 0x7C	; 124
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	01 90       	ld	r0, Z+
 2b2:	f0 81       	ld	r31, Z
 2b4:	e0 2d       	mov	r30, r0
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	ba 01       	movw	r22, r20
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <Dio_SetPinMode+0xe8>
 2be:	66 0f       	add	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	8a 95       	dec	r24
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <Dio_SetPinMode+0xe4>
 2c6:	cb 01       	movw	r24, r22
 2c8:	80 95       	com	r24
 2ca:	90 81       	ld	r25, Z
 2cc:	98 23       	and	r25, r24
 2ce:	90 83       	st	Z, r25
 2d0:	f9 01       	movw	r30, r18
 2d2:	e4 57       	subi	r30, 0x74	; 116
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	01 90       	ld	r0, Z+
 2d8:	f0 81       	ld	r31, Z
 2da:	e0 2d       	mov	r30, r0
 2dc:	90 81       	ld	r25, Z
 2de:	89 23       	and	r24, r25
 2e0:	80 83       	st	Z, r24
 2e2:	08 95       	ret

000002e4 <DIO_Init>:
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	00 e6       	ldi	r16, 0x60	; 96
 2ec:	10 e0       	ldi	r17, 0x00	; 0
 2ee:	c0 e0       	ldi	r28, 0x00	; 0
 2f0:	f8 01       	movw	r30, r16
 2f2:	61 91       	ld	r22, Z+
 2f4:	8f 01       	movw	r16, r30
 2f6:	8c 2f       	mov	r24, r28
 2f8:	0e 94 ed 00 	call	0x1da	; 0x1da <Dio_SetPinMode>
 2fc:	cf 5f       	subi	r28, 0xFF	; 255
 2fe:	c0 32       	cpi	r28, 0x20	; 32
 300:	b9 f7       	brne	.-18     	; 0x2f0 <DIO_Init+0xc>
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	08 95       	ret

0000030a <DIO_WritePinVal>:
}

void DIO_WritePinVal(Pin_Type Pin_ID ,u8 VALUE )
{
	
	Pin_Type Port_Index = Pin_ID / 8;
 30a:	e8 2f       	mov	r30, r24
 30c:	e6 95       	lsr	r30
 30e:	e6 95       	lsr	r30
 310:	e6 95       	lsr	r30
	Pin_Type Pin_Index  = Pin_ID % 8;
 312:	87 70       	andi	r24, 0x07	; 7
	if (VALUE==HIGH)
 314:	61 30       	cpi	r22, 0x01	; 1
 316:	a9 f4       	brne	.+42     	; 0x342 <DIO_WritePinVal+0x38>
	{
		SetBit(*DIO_RegPORT[Port_Index],Pin_Index);
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	e4 57       	subi	r30, 0x74	; 116
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	01 90       	ld	r0, Z+
 324:	f0 81       	ld	r31, Z
 326:	e0 2d       	mov	r30, r0
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	a9 01       	movw	r20, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_WritePinVal+0x2a>
 330:	44 0f       	add	r20, r20
 332:	55 1f       	adc	r21, r21
 334:	8a 95       	dec	r24
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_WritePinVal+0x26>
 338:	ca 01       	movw	r24, r20
 33a:	90 81       	ld	r25, Z
 33c:	89 2b       	or	r24, r25
 33e:	80 83       	st	Z, r24
 340:	08 95       	ret
	}
	else if (VALUE==LOW)
 342:	61 11       	cpse	r22, r1
 344:	15 c0       	rjmp	.+42     	; 0x370 <DIO_WritePinVal+0x66>
	{
		ClrBit(*DIO_RegPORT[Port_Index],Pin_Index);
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	e4 57       	subi	r30, 0x74	; 116
 34e:	ff 4f       	sbci	r31, 0xFF	; 255
 350:	01 90       	ld	r0, Z+
 352:	f0 81       	ld	r31, Z
 354:	e0 2d       	mov	r30, r0
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	a9 01       	movw	r20, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_WritePinVal+0x58>
 35e:	44 0f       	add	r20, r20
 360:	55 1f       	adc	r21, r21
 362:	8a 95       	dec	r24
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_WritePinVal+0x54>
 366:	ca 01       	movw	r24, r20
 368:	80 95       	com	r24
 36a:	90 81       	ld	r25, Z
 36c:	89 23       	and	r24, r25
 36e:	80 83       	st	Z, r24
 370:	08 95       	ret

00000372 <SPI_voidInit>:
{


	/* Interrupt Enable */
#if SPI_INTERUPT == SPI_INT_DISABLE
	ClrBit(SPCR,SPIE);
 372:	6f 98       	cbi	0x0d, 7	; 13
	}*/

	/* Master mode or slave Mode */

#if SPI_MODE == MASTER
	SetBit(SPCR,MSTR);
 374:	6c 9a       	sbi	0x0d, 4	; 13
	ClrBit(SPCR,SPR0);
#elif SPI_u8_CLK_RATE  == SPI_CLK_16
	ClrBit(SPCR,SPR1);
	SetBit(SPCR,SPR0);
#elif SPI_u8_CLK_RATE  == SPI_CLK_64
	ClrBit(SPCR,SPR0);
 376:	68 98       	cbi	0x0d, 0	; 13
	SetBit(SPCR,SPR1);
 378:	69 9a       	sbi	0x0d, 1	; 13
	ClrBit(SPCR,MSTR);
#endif

	/* Select Data order */
#if SPI_DATA_ORDER == MSB
	ClrBit(SPCR,DORD);
 37a:	6d 98       	cbi	0x0d, 5	; 13

#endif

	/* Select the Clk Polarity */
#if SPI_CLK_POL == RAISING_EDGE
	ClrBit(SPCR,CPOL);
 37c:	6b 98       	cbi	0x0d, 3	; 13

	/* Select the Clk Phase */
#if SPI_CLK_PHASE == SAMPLE
	ClrBit(SPCR,CPHA);
#elif SPI_CLK_PHASE == SETUP
	SetBit(SPCR,CPHA);
 37e:	6a 9a       	sbi	0x0d, 2	; 13

#endif

	/* Enable SPI */
	SetBit(SPCR,SPE);
 380:	6e 9a       	sbi	0x0d, 6	; 13
 382:	08 95       	ret

00000384 <SPI_u8SendRecieveByte>:

u8 SPI_u8SendRecieveByte(u8 Copy_u8Data, u8 *Copy_pu8RecData)
{
	u8 Local_u8ReturnState = 1;
	/* Check the pointer */
	if(Copy_pu8RecData == NULL)
 384:	61 15       	cp	r22, r1
 386:	71 05       	cpc	r23, r1
 388:	41 f0       	breq	.+16     	; 0x39a <SPI_u8SendRecieveByte+0x16>
		Local_u8ReturnState = 0;
	}
	else
	{
		/* Write Data Byte */
		SPDR = Copy_u8Data;
 38a:	8f b9       	out	0x0f, r24	; 15
		/* wait until transmission is completed */
		while(GetBit(SPSR,SPIF) == 0);
 38c:	77 9b       	sbis	0x0e, 7	; 14
 38e:	fe cf       	rjmp	.-4      	; 0x38c <SPI_u8SendRecieveByte+0x8>
		/* Get the Data */
		*Copy_pu8RecData = SPDR;
 390:	8f b1       	in	r24, 0x0f	; 15
 392:	fb 01       	movw	r30, r22
 394:	80 83       	st	Z, r24

}

u8 SPI_u8SendRecieveByte(u8 Copy_u8Data, u8 *Copy_pu8RecData)
{
	u8 Local_u8ReturnState = 1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	08 95       	ret
	/* Check the pointer */
	if(Copy_pu8RecData == NULL)
	{
		Local_u8ReturnState = 0;
 39a:	80 e0       	ldi	r24, 0x00	; 0
		/* Get the Data */
		*Copy_pu8RecData = SPDR;
	}

	return Local_u8ReturnState;
}
 39c:	08 95       	ret

0000039e <__vector_11>:
	}
}


 void __vector_11(void) __attribute__((signal));
 void __vector_11(void){
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	2f 93       	push	r18
 3aa:	3f 93       	push	r19
 3ac:	4f 93       	push	r20
 3ae:	5f 93       	push	r21
 3b0:	6f 93       	push	r22
 3b2:	7f 93       	push	r23
 3b4:	8f 93       	push	r24
 3b6:	9f 93       	push	r25
 3b8:	af 93       	push	r26
 3ba:	bf 93       	push	r27
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
	 static u16 OvfCounter = 0 ;
	 OvfCounter++;
 3c0:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <OvfCounter.1632>
 3c4:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <OvfCounter.1632+0x1>
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <OvfCounter.1632+0x1>
 3ce:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <OvfCounter.1632>

	 if (TMR0_OVFCounter == OvfCounter)
 3d2:	83 31       	cpi	r24, 0x13	; 19
 3d4:	93 41       	sbci	r25, 0x13	; 19
 3d6:	79 f4       	brne	.+30     	; 0x3f6 <__vector_11+0x58>
	 {
		 TCNT0 =  Timer0_Preload;
 3d8:	81 e3       	ldi	r24, 0x31	; 49
 3da:	82 bf       	out	0x32, r24	; 50
		 
		 //clear counter
		 OvfCounter = 0;
 3dc:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <OvfCounter.1632+0x1>
 3e0:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <OvfCounter.1632>
		 if (prv_callbackovf != NUL)
 3e4:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <prv_callbackovf>
 3e8:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <prv_callbackovf+0x1>
 3ec:	ec 34       	cpi	r30, 0x4C	; 76
 3ee:	8c e4       	ldi	r24, 0x4C	; 76
 3f0:	f8 07       	cpc	r31, r24
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <__vector_11+0x58>
		 {
			 prv_callbackovf();
 3f4:	09 95       	icall
		 
		 // call action
	 }
	 
	 
 }
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	bf 91       	pop	r27
 3fc:	af 91       	pop	r26
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	7f 91       	pop	r23
 404:	6f 91       	pop	r22
 406:	5f 91       	pop	r21
 408:	4f 91       	pop	r20
 40a:	3f 91       	pop	r19
 40c:	2f 91       	pop	r18
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <__vector_10>:
 
 
 
 
  void __vector_10(void) __attribute__((signal));
  void __vector_10(void){
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	2f 93       	push	r18
 424:	3f 93       	push	r19
 426:	4f 93       	push	r20
 428:	5f 93       	push	r21
 42a:	6f 93       	push	r22
 42c:	7f 93       	push	r23
 42e:	8f 93       	push	r24
 430:	9f 93       	push	r25
 432:	af 93       	push	r26
 434:	bf 93       	push	r27
 436:	ef 93       	push	r30
 438:	ff 93       	push	r31
	  static u16 CTCCounter = 0 ;
	  CTCCounter++;
 43a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 43e:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__data_end+0x1>
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__data_end+0x1>
 448:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>

	  if (prv_TMR0_CTCCounter == CTCCounter)
 44c:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <prv_TMR0_CTCCounter>
 450:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <prv_TMR0_CTCCounter+0x1>
 454:	82 17       	cp	r24, r18
 456:	93 07       	cpc	r25, r19
 458:	69 f4       	brne	.+26     	; 0x474 <__vector_10+0x5c>
	  {
		  
		  //clear counter
		  CTCCounter = 0;
 45a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x1>
 45e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
		  if (prv_callbackCTC != NUL)
 462:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <prv_callbackCTC>
 466:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <prv_callbackCTC+0x1>
 46a:	ec 34       	cpi	r30, 0x4C	; 76
 46c:	8c e4       	ldi	r24, 0x4C	; 76
 46e:	f8 07       	cpc	r31, r24
 470:	09 f0       	breq	.+2      	; 0x474 <__vector_10+0x5c>
		  {
			  prv_callbackCTC();
 472:	09 95       	icall
		  
		  // call action
	  }
	  
	  
  }
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <_exit>:
 496:	f8 94       	cli

00000498 <__stop_program>:
 498:	ff cf       	rjmp	.-2      	; 0x498 <__stop_program>
